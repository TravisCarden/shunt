<?php

/**
 * @file
 * An API and UI for defining and interacting with "shunts".
 *
 * Enable your site to fail gracefully under strain.
 */

/**
 * Implements hook_menu().
 */
function shunt_menu() {
  $items = array();

  $items['admin/config/system/shunt'] = array(
    'title' => 'Shunt',
    'description' => 'Notify other modules to fail gracefully.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shunt_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Callback for admin/config/system/shunt.
 *
 * @see system_settings_form
 */
function shunt_admin_settings() {
  // Add checkboxes for shunt trips.
  $shunts = shunt_get_shunt_definitions();
  foreach ($shunts as $shunt => $description) {
    $form[$shunt] = array(
      '#type' => 'checkbox',
      '#title' => $shunt,
      '#default_value' => variable_get($shunt, FALSE),
      '#description' => $description,
    );
  }
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['#submit'][] = 'shunt_admin_settings_form_submit';

  return $form;
}

/**
 * Submit handler for shunt_admin_settings form.
 */
function shunt_admin_settings_form_submit($form, &$form_state) {
  $shunts = shunt_get_shunt_definitions();
  $values = $form_state['values'];
  foreach ($shunts as $shunt_name => $shunt_description) {
    // Set each shunt trip to enabled or disabled according to
    // which checkboxes the site admin checked.
    if ($values[$shunt_name]) {
      shunt_enable($shunt_name);
    }
    else {
      shunt_disable($shunt_name);
    }
  }
}

/**
 * Implements hook_shunt().
 */
function shunt_shunt() {
  return array(
    'shunt' => t('Trip (enable) the main shunt to notify modules to fail gracefully.'),
  );
}

/**
 * Implements hook_modules_uninstalled().
 */
function shunt_modules_uninstalled($modules) {
  // Get a list of modules implementing shut trips.
  $implementing_modules = module_implements('shunt');
  foreach ($modules as $module) {
    // Check if any modules being uninstalled implement shunt trips.
    if (in_array($module, $implementing_modules)) {
      $shunts = shunt_get_shunt_definitions();
      foreach ($shunts as $variable => $description) {
        // Delete custom shunt variables.
        variable_del($variable);
      }
    }
  }
}

/**
 * Trip shunt(s).
 *
 * @param string $name
 *   (optional) The machine name of the shunt to enable. Defaults to NULL for
 *   all.
 */
function shunt_enable($name = NULL) {
  $shunts = shunt_get_shunt_definitions();
  // Check to see if $name is a valid shunt.
  if (!empty($name) && !array_key_exists($name, $shunts)) {
    $text = t('Sorry. @name is not a valid shunt.', array('@name' => $name));
    drupal_set_message($text);
  }
  elseif (!empty($name) && array_key_exists($name, $shunts)) {
    _shunt_enable($name);
  }
  // Trip all shunts if no specific $name is specified.
  else {
    foreach ($shunts as $name => $description) {
      _shunt_enable($name);
    }
  }
}

/**
 * Disable shunt(s).
 *
 * @param string $name
 *   (optional) The machine name of the shunt to disable. Defaults to NULL
 *   (all).
 */
function shunt_disable($name = NULL) {
  $shunts = shunt_get_shunt_definitions();
  // Confirm $name is a valid shunt name.
  if (!empty($name) && !array_key_exists($name, $shunts)) {
    $text = t('Sorry. @name is not a valid shunt.', array('@name' => $name));
    drupal_set_message($text);
  }
  elseif (!empty($name) && array_key_exists($name, $shunts)) {
    _shunt_disable($name);
  }
  // Disable all shunts if no specific $name is specified.
  else {
    foreach ($shunts as $name => $description) {
      _shunt_disable($name);
    }
  }
}

/**
 * Gets a list of enabled shunts.
 *
 * @return array
 *   An array of shunts that are enabled, as returned by
 *   shunt_get_shunt_definitions().
 */
function shunt_get_enabled() {
  return _shunt_get('enabled');
}

/**
 * Gets a list of disabled shunts.
 *
 * @return array
 *   An array of shunts that are disabled, as returned by
 *   shunt_get_shunt_definitions().
 */
function shunt_get_disabled() {
  return _shunt_get('disabled');
}

/**
 * Gets an array of available shunt definitions.
 *
 * @return array
 *   An array of shunts. Each shunt item is keyed by its machine name and has a
 *   value of a translated description string.
 *
 * @see hook_shunt()
 */
function shunt_get_shunt_definitions() {
  $shunts = &drupal_static(__FUNCTION__);
  if (!isset($shunts)) {
    // Get definitions.
    $shunts = module_invoke_all('shunt');
    ksort($shunts);
  }
  return $shunts;
}

/**
 * Determine whether shunt is enabled.
 *
 * @param string $name
 *   The name of the shunt to check.
 *
 * @return bool
 *   TRUE if the shunt is enabled or FALSE if it is disabled.
 */
function shunt_is_enabled($name = 'shunt') {
  if ($name) {
    $shunts_enabled = shunt_get_enabled();
    $shunt_is_enabled = in_array($name, $shunts_enabled);
  }

  return $shunt_is_enabled;
}

/**
 * Gets an array of shunts by status.
 *
 * @param string $status
 *   The status to filter the shunt list by. Accepted values are "enabled" and
 *   "disabled".
 *
 * @return array
 *   An indexed array of shunt machine names.
 */
function _shunt_get($status) {
  $shunts_enabled = array();
  $shunts_disabled = array();

  // Check status for each shunt.
  $shunts = shunt_get_shunt_definitions();
  foreach ($shunts as $name => $description) {
    if (variable_get($name, FALSE)) {
      $shunts_enabled[] = $name;
    }
    else {
      $shunts_disabled[] = $name;
    }
  }

  // Set $result to requested list of shunt trips.
  if ($status == 'enabled') {
    $result = $shunts_enabled;
  }
  elseif ($status == 'disabled') {
    $result = $shunts_disabled;
  }

  return $result;
}

/**
 * Enables a given shunt.
 *
 * @param string $name
 *   The name of the shunt to enable.
 */
function _shunt_enable($name) {
  // Trip the shunt.
  variable_set($name, TRUE);

  // Give user a confirmation message.
  $text = t('"@name" shunt is tripped.', array('@name' => $name));
  drupal_set_message($text);

  // Give other modules an opportunity to react to this shunt being tripped.
  module_invoke_all('shunt_enable', $name);
}

/**
 * Disables a given shunt.
 *
 * @param string $name
 *   The name of the shunt to enable.
 */
function _shunt_disable($name) {
  // Trip the shunt.
  variable_set($name, FALSE);

  // Give user a confirmation message.
  $text = t('"@name" shunt is disabled.', array('@name' => $name));
  drupal_set_message($text);

  // Give other modules an opportunity to react to this shunt being disabled.
  module_invoke_all('shunt_disable', $name);
}
