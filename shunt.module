<?php

/**
 * @file
 * An API and UI for defining and interacting with "shunts".
 *
 * Enable your site to fail gracefully under strain.
 */

/**
 * The variable name prefix for shunt status persistent variables.
 */
define('SHUNT_VARIABLE_PREFIX', 'shunt_');

/**
 * Disables one or all shunts.
 *
 * @param string $shunt
 *   (optional) The machine name of the shunt to disable. Defaults to NULL
 *   (all).
 */
function shunt_disable_shunt($shunt = NULL) {
  if ($shunt) {
    _shunt_set_status($shunt, FALSE);
  }
  else {
    $shunts = shunt_get_shunt_definitions();
    foreach ($shunts as $name => $description) {
      _shunt_set_status($name, FALSE);
    }
  }
}

/**
 * Enables one or all shunts.
 *
 * @param string $shunt
 *   (optional) The machine name of the shunt to enable. Defaults to NULL for
 *   all.
 */
function shunt_enable_shunt($shunt = NULL) {
  if ($shunt) {
    _shunt_set_status($shunt, TRUE);
  }
  else {
    $shunts = shunt_get_shunt_definitions();
    foreach ($shunts as $name => $description) {
      _shunt_set_status($name, TRUE);
    }
  }
}

/**
 * Determines whether a given shunt exists.
 *
 * @param string $shunt
 *   The machine name of the shunt.
 *
 * @return bool
 *   Returns TRUE if the shunt exists or FALSE if it doesn't.
 */
function shunt_exists($shunt) {
  $shunts = shunt_get_shunt_definitions();
  return array_key_exists($shunt, $shunts);
}

/**
 * Gets a list of disabled shunts.
 *
 * @return array
 *   An array of shunts that are disabled, as returned by
 *   shunt_get_shunt_definitions().
 */
function shunt_get_disabled() {
  return _shunt_get_by_status('disabled');
}

/**
 * Gets a list of enabled shunts.
 *
 * @return array
 *   An array of shunts that are enabled, as returned by
 *   shunt_get_shunt_definitions().
 */
function shunt_get_enabled() {
  return _shunt_get_by_status('enabled');
}

/**
 * Gets an array of available shunt definitions.
 *
 * @return array
 *   An array of shunts. Each shunt item is keyed by its machine name and has a
 *   value of a translated description string.
 *
 * @see hook_shunt()
 */
function shunt_get_shunt_definitions() {
  $shunts = &drupal_static(__FUNCTION__);
  if (!isset($shunts)) {
    // Get definitions.
    $shunts = module_invoke_all('shunt');
    ksort($shunts);
  }
  return $shunts;
}

/**
 * Determine whether a given shunt is enabled.
 *
 * @param string $shunt
 *   (optional) The machine name of the shunt. Defaults to "shunt".
 *
 * @return bool
 *   TRUE if the shunt is enabled or FALSE if it is disabled.
 */
function shunt_is_enabled($shunt = 'shunt') {
  // Any shunt which does not exist may be considered to be disabled.
  if (!shunt_exists($shunt)) {
    return FALSE;
  }

  $variable = _shunt_get_variable_name($shunt);
  return (bool) variable_get($variable, FALSE);
}

/**
 * Implements hook_menu().
 */
function shunt_menu() {
  $items = array();

  $items['admin/config/system/shunt'] = array(
    'title' => 'Shunt',
    'description' => 'Configure shunts to make site functionality fail gracefully.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shunt_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'shunt.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_shunt().
 */
function shunt_shunt() {
  $shunts = array(
    'shunt' => t('The default shunt.'),
    'login' => t('Shunts the user login feature.'),
  );

  if (module_exists('webform')) {
    $shunts['webform'] = t('Shunts all webforms.');
  }
  if (module_exists('search')) {
    $shunts['search'] = t('Shunts all search forms.');
  }
  if (module_exists('services')) {
    $shunts['services'] = t('Shunts all services endpoints.');
  }
  if (module_exists('views')) {
    $shunts['views_exposed_form'] = t('Shunts all Views exposed forms.');
  }

  return $shunts;
}

/**
 * Gets an array of shunts by status.
 *
 * @param string $status
 *   The status to filter the shunt list by. Accepted values are "enabled" and
 *   "disabled".
 *
 * @return array
 *   An indexed array of shunt machine names.
 */
function _shunt_get_by_status($status) {
  $shunts_enabled = array();
  $shunts_disabled = array();

  // Check status for each shunt.
  $shunts = shunt_get_shunt_definitions();
  foreach ($shunts as $name => $description) {
    if (shunt_is_enabled($name)) {
      $shunts_enabled[] = $name;
    }
    else {
      $shunts_disabled[] = $name;
    }
  }

  // Set $result to requested list of shunt trips.
  if ($status == 'enabled') {
    $result = $shunts_enabled;
  }
  elseif ($status == 'disabled') {
    $result = $shunts_disabled;
  }

  return $result;
}

/**
 * Gets the name of the Drupal variable where a given shunt's status is stored.
 *
 * @param string $shunt
 *   The machine name of the shunt.
 *
 * @return string
 *   The variable name.
 */
function _shunt_get_variable_name($shunt) {
  return SHUNT_VARIABLE_PREFIX . $shunt;
}

/**
 * Sets the status of a given shunt.
 *
 * @param string $shunt
 *   The machine name of the shunt.
 * @param bool $status
 *   TRUE to enable or FALSE to disable.
 */
function _shunt_set_status($shunt, $status) {
  _shunt_set_status_multiple(array($shunt => $status));
}

/**
 * Sets the status of a given set of shunts.
 *
 * @param array $shunts
 *   An array of shunt statuses. Each item key is a shunt machine name, and its
 *   corresponding value is the new status for that shunt.
 * @param bool $warn_when_same
 *   (optional) Whether or not a warning should be issued when refusing to set a
 *   shunt status because the new status is the same as the old one. TRUE if it
 *   should or FALSE if it should not. Defaults to TRUE.
 */
function _shunt_set_status_multiple($shunts, $warn_when_same = TRUE) {
  foreach ($shunts as $shunt => $status) {
    // Store arguments for t() reused below.
    $args = array('@name' => $shunt);

    // Make sure the shunt exists.
    if (!shunt_exists($shunt)) {
      drupal_set_message(t('No such shunt "@name".', $args), 'error');
      continue;
    }

    // Type cast the new value for strict comparison.
    $new_status = (bool) $status;

    // Find out if the new status is actually different from the current one and
    // don't hit the database or invoke hooks unless it is.
    $current_status = shunt_is_enabled($shunt);
    if ($new_status === $current_status) {
      // Conditionally warn the user.
      if ($warn_when_same) {
        if ($new_status) {
          $message = t('Shunt "@name" is already enabled.', $args);
        }
        else {
          $message = t('Shunt "@name" is already disabled.', $args);
        }
        drupal_set_message($message, 'warning');
      }

      continue;
    }

    // Update the status variable.
    $variable = _shunt_get_variable_name($shunt);
    variable_set($variable, $new_status);

    if ($new_status) {
      // Fire hook_shunt_enable().
      module_invoke_all('shunt_enable', $shunt);

      // Report success.
      drupal_set_message(t('Shunt "@name" has been enabled.', $args));
    }
    else {
      // Fire hook_shunt_disable().
      module_invoke_all('shunt_disable', $shunt);

      // Report success.
      drupal_set_message(t('Shunt "@name" has been disabled.', $args));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function shunt_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == 'views_exposed_form' && shunt_is_enabled('views_exposed_form'))
    || (in_array($form_id, array('search_block_form', 'search_form')) && shunt_is_enabled('search'))
    || ($form_id == 'user_login' && shunt_is_enabled('login'))
    || (!empty($form['#form_id']) && strpos($form['#form_id'], 'webform_client_form') !== FALSE && shunt_is_enabled('webform'))) {

    // Unfortunately, this ONLY disables the form.
    // For the search shunt, searches may still be
    // performed by visiting /search/*.
    $form = shunt_disabled_form($form);
  }
}

/**
 * Implements hook_theme().
 */
function shunt_theme() {
  return array(
    'shunt_message' => array(
      'variables' => array(
        'message' => NULL,
      ),
      'template' => 'shunt-message',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_shunt_message(&$variables) {
  if (module_exists('webform')) {
    $variables['theme_hook_suggestions'][] = 'shunt_message__webform';
  }
  if (module_exists('views')) {
    $variables['theme_hook_suggestions'][] = 'shunt_message__views';
  }
}

/**
 * Returns the standard apology markup for a disable form.
 *
 * @param array $form
 *   The form to be disabled.
 *
 * @return array
 *   The disabled form.
 */
function shunt_disabled_form($form) {
  $message = variable_get('shunt_message_forms', t("We're sorry. this form is currently unavailable."));

  if (variable_get('shunt_form_behavior', 'hide') == 'disable') {
    $form['#disabled'] = TRUE;
    $form['#prefix'] = theme('shunt_message', array('message' => $message));
  }
  else {
    $form = array(
      '#markup' => theme('shunt_message', array('message' => $message)),
    );
  }

  return $form;
}

/**
 * Implements hook_views_pre_view().
 */
function shunt_views_pre_build(&$view) {
  if (shunt_is_enabled('views_exposed_form')) {
    if ($view->inited && $view->display[$view->current_display]->handler->uses_exposed()) {
      if (variable_get('shunt_views_behavior', 'degrade') == 'kill') {
        // Prematurely flag this view as executed and built, thereby preventing
        // actual execution and building.
        $view->executed = TRUE;
        $view->built = TRUE;
      }
      else {
        // For every exposed filter belonging to this view, unset matching
        // $_GET parameter.
        $filters = $view->display[$view->current_display]->display_options['filters'];
        foreach ($filters as $filter_name => $filter) {
          if (!empty($filter['exposed'])) {
            $parameter_identifier = $filter['expose']['identifier'];
            unset($_GET[$parameter_identifier]);
            unset($view->filter[$filter_name]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function shunt_views_post_render(&$view, &$output, &$cache) {
  if (shunt_is_enabled('views_exposed_form')) {
    if (variable_get('shunt_views_behavior', 'degrade') == 'kill') {
      if ($view->inited && $view->display[$view->current_display]->handler->uses_exposed()) {
        $message = variable_get('shunt_message_views', t("We're sorry, the data for this page is currently unavailable."));
        $output = theme('shunt_message', array('message' => $message));
      }
    }
  }
}

/**
 * Implements hook_services_request_preprocess_alter().
 */
function shunt_services_request_preprocess_alter(&$controller, &$args, $options) {
  // If services shunt has been tripped, throw a 500 error.
  if (shunt_is_enabled('services')) {
    $controller['callback'] = 'shunt_services_resource_callback';
  }
}

/**
 * Replacement callback for all resources when shunt is enabled.
 */
function shunt_services_resource_callback() {
  $status_code = 500;
  $message = variable_get('shunt_message_services', t("We're sorry. This service is currently unavailable."));

  services_error($message, $status_code);
}
